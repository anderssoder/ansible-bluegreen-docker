---

- name: ensure facts.d dir exists
  file: path=/etc/ansible/facts.d state=directory
  tags:
    - common:facts

- name: put dummy fact to local facts dir
  lineinfile:
    dest: /etc/ansible/facts.d/dummy.fact
    line: '{ "fact": true }'
    regexp: '^{ "fact": true }'
    create: yes
    state: present
  tags:
    - common:facts

- name: do blue/green logic
  include: pre_tasks.yml
  when: app_bluegreen

- name: cleanup dead containers
  shell: docker rm -f $(docker ps -a -q -f status=dead)
  register: dead_conts
  ignore_errors: yes
  changed_when: dead_conts.stdout != ""
  tags:
    - app:cleanup

- local_action: debug msg="DEPLOYING {{ app_name }}.{% if app_bluegreen %}
      Color of this deploy is {{ next_color | upper }}.{% endif %}
      Version is {{ app_version }}"
  run_once: yes
  tags:
    - app:info
    - app:deploy

- block:
  - name: debug port_prefix value
    debug:
      var: port_prefix

  - name: deploy app
    docker_container:
      name: "{{ app_name }}{% if app_bluegreen %}_{{ next_color }}{% endif %}_{{ item }}"
      state: started
      ports: "{{ port_prefix }}{{ item  }}:{{ app_port  }}"
      image: "{{ app_image | d(app_name) }}:{{ app_version }}"
      command: "{{ app_command }}"
      restart_policy: unless-stopped
      etc_hosts: "{{ app_etc_hosts }}"
      log_driver: "{{ app_log_driver }}"
      log_options: "{{ app_log_options }}"
      env: "{{ app_env }}"
      volumes: "{{ app_volumes }}"
    with_sequence: count={{ app_instances_count }}
    check_mode: "{{ check_mode }}"
    register: deploy
    tags:
      - app:deploy
      - skip_ansible_lint
  rescue:
    - name: cleanup dead containers
      shell: docker rm -f $(docker ps -a -q -f status=dead)

- name: detect app ports
  set_fact:
    app_ports: "{{ deploy.results| map(attribute='ansible_facts.docker_container.NetworkSettings.Ports')| list }}"
  tags:
    - app:deploy

- name: app health check
  uri:
    url: "http://{% if item.values()[0][0].HostIp == '0.0.0.0' %}127.0.0.1{% else %}{{ item.values()[0][0].HostIp }}{% endif %}:{{ item.values()[0][0].HostPort }}/{{ app_health_check_path | d('') }}"
    method: GET
    status_code: 200
  with_items:
    - "{{ app_ports }}"
  tags:
    - app:deploy

- name: generate nginx config for app
  template:
    src: etc/nginx/conf.d/app.conf.j2
    dest: "/etc/nginx/conf.d/{{ app_name }}.conf"
    backup: yes
  when: app_balancing
  register: _nginx_config
  tags:
    - app:nginx
    - skip_ansible_lint

- block:
  - name: check nginx configuration
    command: nginx -t -c /etc/nginx/nginx.conf
    changed_when: False
    tags:
      - app:nginx
      - skip_ansible_lint

  - name: reload nginx
    service: name=nginx state=reloaded
    tags:
      - app:nginx
      - skip_ansible_lint
  when:
    - _nginx_config.changed
    - app_balancing

- name: do blue/green logic
  include: post_tasks.yml
  when: app_bluegreen
