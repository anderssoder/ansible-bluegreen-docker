---
- name: do blue/green logic
  include: pre_tasks.yml
  when: bluegreen

- debug: msg="DEPLOYING {{ app_name }}.{% if bluegreen %}
    Color of this deploy is {{ next_color| upper }}.{% endif %}
    Version is {{ app_version }}"
  run_once: yes
  tags:
    - app:info
    - app:deploy

- name: deploy app
  docker_container:
    name: "{{ app_name }}{% if bluegreen %}_{{ next_color }}{% endif %}_{{ item }}"
    state: started
    ports: all
    recreate: yes
    image: "{{ app_repo| d(app_name) }}:{{ app_version }}"
    restart_policy: unless-stopped
    env:
      REDIS_HOST: "{{ redis_host }}"
  with_sequence: count={{ app_instances_count }}
  check_mode: "{{ check_mode }}"
  register: deploy
  tags:
    - app:deploy

- name: detect app ports
  set_fact:
    app_ports: "{{ deploy.results| map(attribute='ansible_facts.ansible_docker_container.NetworkSettings.Ports')| list }}"
  tags:
    - app:deploy

- name: app health check
  uri:
    url: "http://{% if item.values()[0][0].HostIp == '0.0.0.0' %}127.0.0.1{% else %}{{ item.values()[0][0].HostIp }}{% endif %}:{{ item.values()[0][0].HostPort }}/{{ app_health_check_path | d('') }}"
    method: GET
    status_code: 200
  with_items:
    - "{{ app_ports }}"
  tags:
    - app:deploy

- name: generate nginx config for app
  template:
    src: etc/nginx/conf.d/app.conf.j2
    dest: "/etc/nginx/conf.d/{{ app_name }}.conf"
    backup: yes
  notify:
    - make test request
  tags:
    - app:nginx

- name: check nginx configuration
  shell: "nginx -t -c /etc/nginx/nginx.conf"
  tags:
    - app:nginx

- name: reload nginx
  service: name=nginx state=reloaded
  tags:
    - app:nginx

- name: do blue/green logic
  include: post_tasks.yml
  when: bluegreen

# vim: set et fenc= ft=ansible sts=0 sw=2 ts=2 tw=0 :
